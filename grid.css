body{
}

main{
	background-color: #C5CAE9;
	min-height: 1000px;
	display: grid;
	/*Dividir el grid en un numero determinado de filas y columnas. Puedo usar muchas unidades. %,px, auto, repeat;
	grid-template-rows: 100px 10% auto 15%;
	grid-template-columns: 10% repeat(2, 33%) auto*/
	grid-template-columns: 10vw repeat(3, auto) 200px;
	grid-template-rows: 100px auto 60%;
	
	/*grid-gap: gap filas y columnas;
	grid-row-gap y grip-column-gap para indicar gap individuales*/
	grid-gap: 10px 10px;
	*grid-row-gap: 20px;


	/*Unidades FR => se reparten el espacio disponible 
	grid-template-rows: 100px 10% 1fr 15%;
	grid-template-columns: 1fr 1fr 1fr;*/
	grid-template-rows: 100px 200px 1fr;
	grid-template-columns: 2fr repeat(2, 1fr) 2fr;

	/*grid-auto-rows y grid-auto-columns => Te permite indicar que tamaño tengan los grid items que no esten definidos en grid-template
	grid-template-rows: 100px 200px;
	grid-template-columns: 1fr 1fr 1fr; Tengo tres columnas*/

	/*grid-auto: 1fr; Si aparecen mas filas tendrán el tamaño que yo indique aquí.
	grid-auto-rows => establece un valor por defecto para las filas que no han sido definidas
	grid-auto-columns => establece un valor por defecto para las columnas que no han sido definidas*/
	*grid-auto-rows: 200px;
	*grid-auto-rows: 10vh;


	/*Nombrar los tracks. Automaticamente los tracks se numeran solos, pero podemos darle nombre 
	grid-template-columns: [col_first] 100px [col2] auto [col_end] 10%;
	grid-template-rows: [fila-start] 100px [row1-end row2-start] 200px [row-end] 150px;*/
	*grid-template-columns: [col_first] 100px [col2] auto [col_end] 10%;
	*grid-template-rows: [fila-start] 100px [row1-end row2-start] 200px [row-end] 150px;


	
	/*minmax() => indica un valor maximo y minimo que queramos que tenta una fila o columna en el grid
	grid-template-columns: minmax(200px, 400px) 1fr
	grid-template-rows: minmax(200px, 400px) 1fr;
	*/
	*grid-template-columns: minmax(200px, 400px) 1fr;
	*grid-template-columns: 300px minmax(200px, 40%) 500px;
	*grid-template-columns: repeat(2, 10%) minmax(200px, 400px) repeat(3, 1fr);
	*grid-template-columns: repeat(2, minmax(100px, 200px))  repeat(2, minmax(100px, 1fr));
	
	
	
	/*auto-fill y auto-fit auto rellena los item del grid. Se suele usar con repeat
	auto-fill =>  rellena dejando un espacio al final, es decir, dejará un espacio en la derecha
	auto-fit =>  rellena los grid para que ocupen todo el ancho de la página */
	
	*grid-template-columns: repeat(auto-fill,200px);
	*grid-template-columns: repeat(auto-fit,200px);
	*grid-template-columns: repeat(auto-fill,minmax(200px, 1fr));
	*grid-template-columns: repeat(auto-fit,minmax(200px, 1fr));
	
	
	/* Un ejemplo de la potenca de auto-fit si hacemos un buen uso. con estas
	4 lineas(las 3 de abajo y display:grid) tenemos un layout que sea auto distribuye sin necesidad de responsive*/
	*grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
	*grid-column-gap: 1rem;
	*grid-row-gap: 2rem;
	
	
	
	
	
	grid-template-rows: 100px 200px 100px 200px;
	grid-template-columns: 30vw repeat(2, 10%) 500px;
	/*justificacion de los items justify-items: start | end | center | stretch;*/
	*justify-items: end;


	/*alineación de los items align-items: start | end | center | stretch;*/
	*align-items: end;

	/*justificacion del contenido (Todo el grid  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;*/
	*justify-content: space-around;

	/*alineación del contenido (Todo el grid  align-content: start | end | center | stretch | space-around | space-between | space-evenly;*/
	*align-content: end;
	

	/* grid-auto-flow => Como quieres que se comporte el flujo de cajas hijas de grid, en fila o en columna (Se suele usar con order)
	Flujo de columna: 
	en el grid => grid-auto-flow: column;
	en los hijos grid => order:1;

	Flujo de fila: 
		en el grid => grid-auto-flow: row;
		en los hijos grid => order:1;
	*/

	grid-auto-flow: column;

	grid-template-columns: repeat(4, 1fr);
	

}

	article:nth-child(3){
		*order: 1;
		*grid-area: 1 / 3 / 2 / 5;
		*grid-column: span 2;
	}

	article:nth-child(5){
		/*Establece el orden de aparición de todos los elementos que usan order*/
		*order: 1;
		
		/*Establecer un area o cuantas celdas ocupa un grid-item. Puedes hacerlo con los números grid lines
		usando la propiedad grid-area (indicando todos o con el conjunto
		de propiedades: grid-column-start: ;
  						grid-column-end: ;
  						grid-row-start: ;
  						grid-row-end: ;
		*/
		*grid-area: 1 / 5 / 2 / 7;

		grid-row-start: 1;
		grid-column-start: 1;
		grid-row-end: 2;
  		grid-column-end: 3;

		grid-column: span 2;
  		grid-row: span 2;
	}

	article:nth-child(9){
		*order: 1;
		*grid-area: 1 / 1 / 2 / 3;
		*grid-column: span 2;
	}

	article:nth-child(1){
		*order: 1;
		*grid-area: 1 / 2 / 2 / 4;
		*grid-row: span 2;

	}

	


.item1,.item2,.item3{
	*grid-area: header;
}

article{
	font-size: 3rem;
}

article:nth-child(2n){
	background-color: #303F9F;
}

article:nth-child(2n+1){
	background-color: #5C6BC0;
}
